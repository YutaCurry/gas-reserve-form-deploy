name: callee terraform plan workflow
on:
  workflow_call:
    inputs:
      # SLACK_MESSAGE_TARGET_ENV:
      #   type: string
      #   required: true
      TF_WORK_DIR:
        type: string
        required: true
      # PR_ID:
      #   type: string
      #   required: true
      BASE_BRANCH:
        type: string
        required: true
    # secrets:
      # SLACK_WEBHOOK:
      #   required: true
      # WORKLOAD_IDENTITY_PROVIDER:
      #   required: true
      # SERVICE_ACCOUNT:
      #   required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      COMMENT:
        required: true
      APP_NAME:
        required: true
      # BASE_BRANCH:
      #   required: true
      PR_ID:
        required: true

env:
  STATE_BUCKET: "terraform-state-${{ secrets.APP_NAME }}"
  STATE_PATH_SUFFIX: "frontend/terraform.tfstate"
  TF_VAR_appName: ${{ secrets.APP_NAME }}

jobs:
  tf_plan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: env create [PROD]
        if: ${{ inputs.BASE_BRANCH == 'main'}}
        run: |
          echo "STATE_PATH=prod/${{ env.STATE_PATH_SUFFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_comment=[PROD]${{ secrets.COMMENT }}" >> $GITHUB_ENV
          echo "TF_VAR_env=prod" >> $GITHUB_ENV
      - name: env create [DEV]
        if: ${{ inputs.BASE_BRANCH == 'develop'}}
        run: |
          echo "STATE_PATH=dev/${{ env.STATE_PATH_SUFFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_comment=[DEV]${{ secrets.COMMENT }}" >> $GITHUB_ENV
          echo "TF_VAR_env=dev" >> $GITHUB_ENV
      - id: init
        if: ${{ inputs.BASE_BRANCH == 'main' || inputs.BASE_BRANCH == 'develop' }}
        run: |
          terraform init -backend-config="bucket=${{ env.STATE_BUCKET }}" -backend-config="key=${{ env.STATE_PATH }}"
        working-directory: ./bin/main
      - id: plan
        if: ${{ inputs.BASE_BRANCH == 'main' || inputs.BASE_BRANCH == 'develop' }}
        run: |
          terraform plan -no-color
        working-directory: ./bin/main
        continue-on-error: true
      # TODO エラー扱いとなるが一旦回避
      # - run: echo "${{ steps.plan.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
      #   continue-on-error: true
      # - run: echo "${{ steps.plan.outputs.stderr }}" >> $GITHUB_STEP_SUMMARY
      # - run: echo "${{ steps.plan.outputs.exitcode }}" >> $GITHUB_STEP_SUMMARY
      # 1. PRのコメント欄に65536文字数制限がある
      # 2. github-script もしくは GitHub Actions Workflow 内にも文字数制限がある
      # よって、terraform plan/apply の結果を予め削る必要がある
      # 大量に差分が出た場合は差分を見るのではなく plan/apply の成否を見たい
      # これらを考慮して65000文字に制限する
      - name: truncate terraform plan result
        if: ${{ inputs.BASE_BRANCH == 'main' || inputs.BASE_BRANCH == 'develop' }}
        run: |
          plan=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          EOF
          )
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "${plan}" | grep -v 'Refreshing state' | tail -c 65000 >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      # - run: echo "${{ process.env.PLAN }}" >> $GITHUB_STEP_SUMMARY

      - name: create comment from plan result
        if: ${{ inputs.BASE_BRANCH == 'main' || inputs.BASE_BRANCH == 'develop' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${ process.env.PLAN }
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.TF_WORK_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: "${{ inputs.PR_ID }}",
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          
