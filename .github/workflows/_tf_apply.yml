name: callee terraform apply workflow
on:
  workflow_call:
    inputs:
      TF_WORK_DIR:
        type: string
        required: true
      BASE_BRANCH:
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      COMMENT:
        required: true
      APP_NAME:
        required: true

env:
  STATE_BUCKET: "terraform-state-${{ secrets.APP_NAME }}"
  STATE_PATH_SUFFIX: "frontend/terraform.tfstate"
  TF_VAR_appName: ${{ secrets.APP_NAME }}

jobs:
  tf_apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      is-tfstate-branch: ${{ inputs.BASE_BRANCH == 'main' || inputs.BASE_BRANCH == 'develop' }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: env create [PROD]
        if: ${{ inputs.BASE_BRANCH == 'main'}}
        run: |
          echo "STATE_PATH=prod/${{ env.STATE_PATH_SUFFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_comment=[PROD]${{ secrets.COMMENT }}" >> $GITHUB_ENV
          echo "TF_VAR_env=prod" >> $GITHUB_ENV
      - name: env create [DEV]
        if: ${{ inputs.BASE_BRANCH == 'develop'}}
        run: |
          echo "STATE_PATH=dev/${{ env.STATE_PATH_SUFFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_comment=[DEV]${{ secrets.COMMENT }}" >> $GITHUB_ENV
          echo "TF_VAR_env=dev" >> $GITHUB_ENV
      - id: init
        if: ${{ env.is-tfstate-branch }}
        run: |
          terraform init -backend-config="bucket=${{ env.STATE_BUCKET }}" -backend-config="key=${{ env.STATE_PATH }}"
        working-directory: ./bin/main
      - id: apply
        if: ${{ env.is-tfstate-branch }}
        run: |
          terraform apply -auto-approve -no-color
        working-directory: ./bin/main
        continue-on-error: true
      - name: truncate terraform apply result
        if: ${{ env.is-tfstate-branch }}
        run: |
          apply=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.apply.outputs.stdout, steps.apply.outputs.stderr) }}
          EOF
          )
          echo "APPLY<<EOF" >> $GITHUB_ENV
          echo "${apply}" | grep -v 'Refreshing state' | tail -c 65000 >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: create comment from apply result
        if: ${{ env.is-tfstate-branch && github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>
            
            \`\`\`\n
            ${ process.env.APPLY }
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.TF_WORK_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          
